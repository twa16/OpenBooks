/*
 * The MIT License
 *
 * Copyright 2014 MG Enterprises Consulting LLC.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.mgenterprises.openbooks.views.panel.customers;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.mgenterprises.openbooks.OpenbooksCore;
import org.mgenterprises.openbooks.customer.Customer;
import org.mgenterprises.openbooks.customer.CustomerManager;
import org.mgenterprises.openbooks.invoicing.invoice.Invoice;
import org.mgenterprises.openbooks.invoicing.invoice.InvoiceManager;
import org.mgenterprises.openbooks.util.InvoiceUtils;
import org.mgenterprises.openbooks.util.State;
import org.mgenterprises.openbooks.views.OBCardLayout;
import org.mgenterprises.openbooks.views.ViewChangeListener;
import org.mgenterprises.openbooks.views.actionlistener.DeleteCustomerActionListener;

/**
 *
 * @author Manuel Gauto
 */
public class CustomerDetailPanel extends JPanel implements ViewChangeListener{

    private final OpenbooksCore openbooksCore;
    private Customer customer;
    private InvoiceManager invoiceManager;

    /**
     * Creates new form CustomerUpdatePanel
     */
    public CustomerDetailPanel(OpenbooksCore openbooksCore, InvoiceManager invoiceManager) {
        this.openbooksCore = openbooksCore;
        this.invoiceManager = invoiceManager;
        initComponents();
    }

    /**
     * Get data from CustomerManager and load into table model and
     * use model for table.
     */
    public void processData() {
        try {
            //ID -- Due Date -- Invoice Total -- Total Paid -- Total Due
            DefaultTableModel tableModel = (DefaultTableModel) customerInvoiceTable.getModel();
            tableModel.setRowCount(0);
            Invoice[] invoices = invoiceManager.getCustomerInvoices(customer);
            double totalDue = 0;
            for(Invoice invoice : invoices) {
                Object[] data = new Object[5];
                data[0] = invoice.getInvoiceNumber();
                data[1] = invoice.getDateDue().toString();
                data[2] = invoice.getTotal();
                data[3] = invoice.getAmountPaid();
                double due = invoice.getTotal() - invoice.getAmountPaid();
                totalDue+=due;
                data[4] = due;
                tableModel.addRow(data);
            }
            this.totalDueLabel.setText("Total Due: "+totalDue);
            customerInvoiceTable.setModel(tableModel);
            customerInvoiceTable.repaint();
        } catch (IOException ex) {
            Logger.getLogger(DeleteCustomerActionListener.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(null, "Unable to complete requested action because of connection problems.", "Warning!", JOptionPane.OK_OPTION);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerInvoiceTable = new javax.swing.JTable();
        companyNameLabel = new javax.swing.JLabel();
        totalDueLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(650, 650));
        setName(""); // NOI18N

        idLabel.setText("Loading...");

        customerInvoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Date Due", "Total Due", "Total Paid", "Total Due"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerInvoiceTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        customerInvoiceTable.getTableHeader().setReorderingAllowed(false);
        customerInvoiceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customerInvoiceTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerInvoiceTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(customerInvoiceTable);
        if (customerInvoiceTable.getColumnModel().getColumnCount() > 0) {
            customerInvoiceTable.getColumnModel().getColumn(0).setMinWidth(50);
            customerInvoiceTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            customerInvoiceTable.getColumnModel().getColumn(0).setMaxWidth(50);
            customerInvoiceTable.getColumnModel().getColumn(2).setMinWidth(100);
            customerInvoiceTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            customerInvoiceTable.getColumnModel().getColumn(2).setMaxWidth(100);
            customerInvoiceTable.getColumnModel().getColumn(3).setMinWidth(150);
            customerInvoiceTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            customerInvoiceTable.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        companyNameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        companyNameLabel.setText("Loading...");

        totalDueLabel.setText("Total Due:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                    .addComponent(companyNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(totalDueLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(companyNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(idLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalDueLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    private void customerInvoiceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerInvoiceTableMouseClicked
        if(evt.getClickCount() == 2) { //Is it a double click, we don't care about what button it was
            int row = customerInvoiceTable.rowAtPoint(evt.getPoint());
            int col = customerInvoiceTable.columnAtPoint(evt.getPoint());
            if (row >= 0 && col >= 0) {
                if(evt.getClickCount()==2 && evt.getButton()==MouseEvent.BUTTON1) { 
                    try {
                        Object object = customerInvoiceTable.getModel().getValueAt(row, 0);
                        int id = Integer.parseInt(object.toString());
                        Invoice invoice = invoiceManager.getInvoiceLockless(id);
                        JPanel mainPanelArea = openbooksCore.getMainPanel();
                        OBCardLayout cl = (OBCardLayout)(mainPanelArea.getLayout());
                        cl.show(mainPanelArea, "InvoiceUpdatePanel", invoice);
                    } catch (IOException ex) {
                        Logger.getLogger(CustomerDetailPanel.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showConfirmDialog(null, "Unable to complete requested action because of connection problems.", "Warning!", JOptionPane.OK_OPTION);
                    }
                }
            }
        }
    }//GEN-LAST:event_customerInvoiceTableMouseClicked

    private void customerInvoiceTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerInvoiceTableMouseReleased

    }//GEN-LAST:event_customerInvoiceTableMouseReleased

    /**
     * Set the values of the fields using the data of a customer
     * from the selected row.
     * 
     * @param row Row to get data from
     */
    public void setFields() {
        this.companyNameLabel.setText(customer.getCompanyName());
        this.idLabel.setText("ID: "+customer.getCustomerNumber());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel companyNameLabel;
    private javax.swing.JTable customerInvoiceTable;
    private javax.swing.JLabel idLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel totalDueLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onSwitchTo(Object object) {
        this.customer = (Customer) object;
        SwingWorker swingWorker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                processData();
                setFields();
                return null;
            }
            
        };
        swingWorker.execute();
    }

    @Override
    public void onSwitchFrom() {
        try {
            openbooksCore.getCustomerManager().releaseLock(customer.getCustomerNumber());
        } catch (IOException ex) {
            Logger.getLogger(CustomerDetailPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(null, "Unable to complete requested action because of connection problems.", "Warning!", JOptionPane.OK_OPTION);
        }
    }
}
