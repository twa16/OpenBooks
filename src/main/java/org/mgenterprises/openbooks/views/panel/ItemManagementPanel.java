/*
 * The MIT License
 *
 * Copyright 2014 MG Enterprises Consulting LLC.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.mgenterprises.openbooks.views.panel;

import org.mgenterprises.openbooks.views.panel.customers.CustomerUpdatePanel;
import java.awt.Font;
import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.mgenterprises.openbooks.invoicing.item.Item;
import org.mgenterprises.openbooks.invoicing.item.ItemManager;
import org.mgenterprises.openbooks.views.ViewChangeListener;
import org.mgenterprises.openbooks.views.actionlistener.DeleteCustomerActionListener;
import org.mgenterprises.openbooks.views.actionlistener.DeleteItemActionListener;

/**
 *
 * @author Manuel Gauto
 */
public class ItemManagementPanel extends JPanel implements ViewChangeListener{

    private ItemManager itemManager;

    public ItemManagementPanel(ItemManager itemManager) {
        this.itemManager = itemManager;
        initComponents();
    }

    private void loadItems() {
        try {
            ((DefaultTableModel)itemTable.getModel()).setRowCount(0);
            DefaultTableModel defaultTableModel = (DefaultTableModel) itemTable.getModel();
            for (Item item : itemManager.getItems()) {
                Object[] data = new Object[3];
                data[0] = item.getName();
                data[1] = item.getDescription();
                data[2] = item.getBasePrice();
                defaultTableModel.addRow(data);
            }
            defaultTableModel.fireTableDataChanged();
        } catch (IOException ex) {
            Logger.getLogger(DeleteCustomerActionListener.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(null, "Unable to complete requested action because of connection problems.", "Warning!", JOptionPane.OK_OPTION);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        itemNameLabel = new javax.swing.JLabel();
        itemNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        basePriceField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionField = new javax.swing.JTextArea();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(650, 650));
        setOpaque(false);

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Description", "Base Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.getTableHeader().setReorderingAllowed(false);
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                itemTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);
        if (itemTable.getColumnModel().getColumnCount() > 0) {
            itemTable.getColumnModel().getColumn(0).setPreferredWidth(75);
            itemTable.getColumnModel().getColumn(2).setMinWidth(75);
            itemTable.getColumnModel().getColumn(2).setPreferredWidth(75);
            itemTable.getColumnModel().getColumn(2).setMaxWidth(150);
        }

        itemNameLabel.setText("Name");

        itemNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Base Price");

        basePriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basePriceFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Description");

        descriptionField.setColumns(20);
        descriptionField.setRows(5);
        jScrollPane2.setViewportView(descriptionField);

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(itemNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(basePriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNameLabel)
                            .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(basePriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newButton)
                            .addComponent(saveButton)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void itemNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameFieldActionPerformed

    private void basePriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basePriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_basePriceFieldActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        this.itemNameField.setText("");
        this.descriptionField.setText("");
        this.basePriceField.setText("");
        oldItemName = "";
    }//GEN-LAST:event_newButtonActionPerformed

    private String oldItemName = "";
    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        try {
            int row = itemTable.getSelectedRow();
            //Make sure a selection was made
            if (row == -1) {
                clearFields();
            }

            //Populate fields
            String itemName = (String) itemTable.getValueAt(row, 0);
            this.itemNameField.setText(itemName);
            //Cache itemname in case it is changed
            oldItemName = itemName;
            Item item = itemManager.getItem(itemName);
            this.descriptionField.setText(item.getDescription());
            this.basePriceField.setText(String.valueOf(item.getBasePrice()));
            if (!itemManager.existsAndAllowed(item.getName())) {
                this.saveButton.setText("Save (Locked)");
                this.saveButton.setEnabled(false);
            } else {
                this.saveButton.setText("Save");
                this.saveButton.setFont(saveButton.getFont().deriveFont(Font.PLAIN));
            }
        } catch (IOException ex) {
            Logger.getLogger(DeleteCustomerActionListener.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(null, "Unable to complete requested action because of connection problems.", "Warning!", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_itemTableMouseClicked

    private void clearFields() {
        this.itemNameField.setText("");
        this.descriptionField.setText("");
        this.basePriceField.setText("");
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            String name = itemNameField.getText();
            String description = descriptionField.getText();
            double basePrice = Double.parseDouble(basePriceField.getText());
            Item item = new Item();
            item.setName(name);
            item.setDescription(description);
            item.setBasePrice(basePrice);
            if (oldItemName.equals(itemNameField.getText())) {
                itemManager.updateItem(item);
            } else {
                itemManager.renameItem(oldItemName, item);
            }
            this.saveButton.setText("Save");
            this.saveButton.setFont(saveButton.getFont().deriveFont(Font.PLAIN));
            this.newButtonActionPerformed(evt);
            loadItems();
        } catch (IOException ex) {
            Logger.getLogger(DeleteCustomerActionListener.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(null, "Unable to complete requested action because of connection problems.", "Warning!", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void itemTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseReleased
        int r = itemTable.rowAtPoint(evt.getPoint());
        if (r >= 0 && r < itemTable.getRowCount()) {
            itemTable.setRowSelectionInterval(r, r);
        } else {
            itemTable.clearSelection();
        }

        int rowindex = itemTable.getSelectedRow();
        if (rowindex < 0) {
            return;
        }
        if (evt.isPopupTrigger() && evt.getComponent() instanceof JTable) {
            String itemName = (String) itemTable.getValueAt(rowindex, 0);
            JPopupMenu popup = new JPopupMenu();
            JMenuItem deleteCustomerMenuItem = new JMenuItem("Delete");
            deleteCustomerMenuItem.addActionListener(new DeleteItemActionListener(itemManager, itemName));
            popup.add(deleteCustomerMenuItem);
            popup.show(evt.getComponent(), evt.getX(), evt.getY());
            loadItems();
        }
    }//GEN-LAST:event_itemTableMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField basePriceField;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JTextField itemNameField;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onSwitchTo(Object object) {
        SwingWorker swingWorker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                loadItems();
                return null;
            }
            
        };
        swingWorker.execute();
    }

    @Override
    public void onSwitchFrom() {
        SwingWorker switchFromWorker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    itemManager.releaseAllLocks();
                } catch (IOException ex) {
                    Logger.getLogger(CustomerUpdatePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }

        };
        switchFromWorker.execute();
    }
}
